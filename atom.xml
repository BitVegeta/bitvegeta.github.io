<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[精神和时间的小屋]]></title>
  <link href="http://bitvegeta.github.io/atom.xml" rel="self"/>
  <link href="http://bitvegeta.github.io/"/>
  <updated>2014-12-05T21:46:36+08:00</updated>
  <id>http://bitvegeta.github.io/</id>
  <author>
    <name><![CDATA[bitvegeta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime Text Shell Command]]></title>
    <link href="http://bitvegeta.github.io/blog/sublime-text-shell-command/"/>
    <updated>2014-12-05T21:40:43+08:00</updated>
    <id>http://bitvegeta.github.io/blog/sublime-text-shell-command</id>
    <content type="html"><![CDATA[<p><a href="http://www.sublimetext.com/">Sublime Text</a> 作为一款优秀的文本编辑器，近年来其发展的势头一度盖过传统的 TextMate ，其拥有强大的包管理功能和优美易用的界面，被称为“最性感的编辑器”。</p>

<p><a href="http://www.sublimetext.com/">Sublime Text 2</a> 是一款免费的应用，推荐刚接触 Mac 和编程的同学使用。</p>

<p>在终端用命令行调用 Sublime Text 2 的快捷方法设置如下：</p>

<h4 id="sublime-text-2-">为 Sublime Text 2 设置一个符号链接</h4>

<p>{ % coderay [lang:ruby] [linenos:true] [为 Sublime Text 2 设置一个符号链接] % }
$ sudo ln -s “/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl” /usr/bin/subl
{ % endcoderay % }</p>

<p><strong>重要提示：Mac下这个操作要求必须是Root权限账户。</strong></p>

<p>执行命令，如果运行成功，则可以直接用“subl”作为命令编辑一个文件；
如果提示错误，则需要查看 $PATH 的值，以确保<code>/usr/bin/</code>路径在<code>/bin/</code>路径之前。查看命令如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ echo $PATH</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>若需更改 $PATH 变量，打开 /etc/paths 路径编辑即可；</p>

<h4 id="section">参考资料</h4>

<p>[1][Mac开发者2013年新机设置参考] (http://www.yangzhiping.com/tech/mac-dev.html)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zsh: No Matches Found 问题解决方法]]></title>
    <link href="http://bitvegeta.github.io/blog/zsh-no-matches-found/"/>
    <updated>2014-12-04T22:34:56+08:00</updated>
    <id>http://bitvegeta.github.io/blog/zsh-no-matches-found</id>
    <content type="html"><![CDATA[<p>我的终端环境是 iTerm2 + Zsh 组合，今天发现，在Zsh环境下提交rake命令后报错：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>&#8220;zsh: no matches found 错误&#8221; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># 输入</span>
</span><span class="line"><span class="err">$</span> <span class="n">rake</span> <span class="n">new_post</span><span class="o">[</span><span class="s2">&quot;example--title&quot;</span><span class="o">]</span>
</span><span class="line"><span class="c1"># 显示错误</span>
</span><span class="line"><span class="ss">zsh</span><span class="p">:</span> <span class="n">no</span> <span class="n">matches</span> <span class="ss">found</span><span class="p">:</span> <span class="n">new_post</span><span class="o">[</span><span class="s2">&quot;example--title&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>求助万能的Google，找到了问题原因和解决办法：</p>

<p><strong>原因：</strong></p>

<table>
  <tbody>
    <tr>
      <td>Zsh会自动把类似‘*，(，</td>
      <td>，&lt;，[，?’等符号识别为一种通配符；</td>
    </tr>
  </tbody>
</table>

<p><strong>解决办法一：</strong></p>

<p>按照下面方式输入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>&#8220;zsh: no matches found 解决办法&#8221; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># 输入</span>
</span><span class="line"><span class="err">$</span> <span class="n">rake</span> <span class="n">new_post</span>
</span><span class="line"><span class="c1"># 显示</span>
</span><span class="line"><span class="no">Enter</span> <span class="n">a</span> <span class="n">title</span> <span class="k">for</span> <span class="n">your</span> <span class="ss">post</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时输入  example–title 即可。</p>

<p><strong>解决办法二：</strong></p>

<p>取消zsh的通配(GLOB),修改 ~/.zshrc 文件，添加下列内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">alias rake="noglob rake"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个方法较为彻底。</p>

<p><strong>解决办法三：</strong></p>

<p>使用转义字符’&#8217;，帮助 Zsh 读懂命令；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake new_post\["This is New Post"\] </span></code></pre></td></tr></table></div></figure></notextile></div>
<hr />

<p>P.S.其余的 Zsh: no matches found 问题都可以用类似方法解决。</p>

<p><strong>参考资料</strong></p>

<p>[1]<a href="https://github.com/imathis/octopress/issues/117">Not compatible with Zsh #117</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid Exception: Undefined Method Sort 错误解决方法]]></title>
    <link href="http://bitvegeta.github.io/blog/liquid-exception-undefined-method-sort/"/>
    <updated>2014-12-04T19:46:27+08:00</updated>
    <id>http://bitvegeta.github.io/blog/liquid-exception-undefined-method-sort</id>
    <content type="html"><![CDATA[<p>折腾了一下午自己的 Octopress 博客配置，但是在提交更新时出现了一些问题，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 输入命令
</span><span class="line">$ rake gen_deploy
</span><span class="line"># 显示错误信息
</span><span class="line">   Liquid Exception: undefined method `sort!' for nil:NilClass in _includes/post/categories.html, included in _layouts/post.html
</span><span class="line">   jekyll 2.5.2 | Error:  undefined method `sort!' for nil:NilClass</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在万能的 Google 上找到了解决办法，感谢！这位同学的博客<a href="http://blog.gordontillman.info/blog/2014-11-26-liquid-exception:-undefined-method-sort.html">[1]</a>也是 Octopress ，哈哈！:D </p>

<p><strong>解决办法是：</strong></p>

<p>用 Sublime 打开 <code>~/Octopress/plugins/category_generator.rb</code> 文件，找到下面的这段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> def category_links(categories)
</span><span class="line">      categories = categories.sort!.map { |c| category_link c }
</span><span class="line">        case categories.length
</span><span class="line">        when 0
</span><span class="line">          ""
</span><span class="line">        when 1
</span><span class="line">          categories[0].to_s
</span><span class="line">        else
</span><span class="line">          "#{categories[0...-1].join(', ')}, #{categories[-1]}"
</span><span class="line">        end
</span><span class="line">      end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后，添加两行代码（<code>添加的代码行，后面都添加了注释</code>）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> def category_links(categories)
</span><span class="line">   if categories != nil     # Added this line 添加这一行
</span><span class="line">      categories = categories.sort!.map { |c| category_link c }
</span><span class="line">        case categories.length
</span><span class="line">        when 0
</span><span class="line">          ""
</span><span class="line">        when 1
</span><span class="line">          categories[0].to_s
</span><span class="line">        else
</span><span class="line">          "#{categories[0...-1].join(', ')}, #{categories[-1]}"
</span><span class="line">        end
</span><span class="line">      end                      # Added this line 添加这一行
</span><span class="line">   end</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>保存后，运行 <code>rake gen_deploy</code>显示成功。</p>

<hr />
<p><strong>参考资料</strong></p>

<p>[1] <a href="http://blog.gordontillman.info/blog/2014-11-26-liquid-exception:-undefined-method-sort.html">Liquid Exception: Undefined Method Sort</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress搭建Github博客Mac教程]]></title>
    <link href="http://bitvegeta.github.io/blog/mac-octopress-github-blog-newbie-xiao-bai-jiao-cheng/"/>
    <updated>2014-11-30T11:41:47+08:00</updated>
    <id>http://bitvegeta.github.io/blog/mac-octopress-github-blog-newbie-xiao-bai-jiao-cheng</id>
    <content type="html"><![CDATA[<p>在 Mac 系统下，利用 Octopress 框架在 Github 上搭建一个免费的个人Blog空间。——— 相信这是很多刚接触  Mac  和 Github 的朋友们必须完成的一个成长实践。</p>

<p>我把自己的搭建步骤及遇到的问题全部详细的写下来，作为这个博客空间的第一篇文章，算是完成对 Octopress 和 Github 的致敬传统。同时也希望能给遇到同样问题的小白朋友们提供一些帮助！因为我相信，广大小白朋友缺乏的不是一篇精美的标准流程，而是一个整合了多种错误问题，错误代码及其解决办法的示例教程。我觉得我犯的错误属于比较经典的反面教材，正好起到抛砖引玉的作用！：）<!--more--></p>

<p>由于学识粗浅，若有不对之处，还望高手指正！多谢！非小白请直接看 <strong>［搭建步骤］</strong>。</p>

<hr />

<p><strong>本文目录</strong></p>

<p>一、前言</p>

<p>二、背景知识</p>

<p>三、搭建步骤</p>

<p>四、参考资料</p>

<hr />

<h3 id="section"><strong>一、前言</strong></h3>

<p>网上关于这方面的操作教程已经有很多，有很多博客写的结构清晰，文字易读，页面优美，令人敬佩！</p>

<p>但作为一个“一直被女友鄙视智商”的小白，我自己在动手搭建过程中，还是遇到了一些问题，耗费了不少时间，折腾多次几近放弃。虽然最终借助万能的 Google 解决了安装问题，但也忍不住为广大小白的命运慨叹一番：万事开头难啊！对小白来说，这些不明觉厉的红色 Error 代码会放大成一串串难以琢磨的纠结疑问，如果没有足够的耐心和有效的解决方案，难免会急躁、苦恼，甚至失去进一步学习的激情！于是，牛人愈牛，而小白恒白，这也是“马太效应”在知识学习方面的客观体现吧！［泪］</p>

<p><strong>困难存在的客观原因：</strong></p>

<p>1.对牛弹琴：</p>

<p>其实玩转 Octopress + Github 搭建的 Blog 系统，读者必须掌握或了解Linux环境下的软件操作习惯，Github，SSH的一些基本知识，以及最重要的，Git的初级应用。而小白基础太差，大部分都没有命令行操作经验，甚至连终端是什么都不知道，更不用说 Git，Github，RVM，Ruby，HomeBrew 等。所以，即使看着精细标准化的操作教程，小白也难免会觉得“自己这水平充其量也就只能在吃草界混了”，大脑自动切换到呆萌模式。</p>

<p>2.不明觉厉：</p>

<p>搭建博客的操作基本都是标准化的，但安装过程中产生的问题却各式各样。比如：Mac系统自带的Ruby版本可能会导致一些问题，Bash本身的设置也可能会导致一些问题，Git的merge操作会导致问题，解决问题A结果导致问题B，甚至自己不小心输错而不自知等等都会导致问题。而当这些问题反馈成一段段不明觉厉的 Error 代码显示在早已被终端屏幕搞的眼花缭乱的小白面前时，内心那种感觉简直就是有一万匹草泥马奔腾而过！</p>

<p><strong>解决方案：</strong></p>

<p>1.基础铺垫：先学习了解一些基本知识，形成一个正确的感性认识，理解每一步操作的意义；</p>

<p>2.稍安勿躁：出现错误提示不要着急，有控制的尝试解决，在未解决旧问题前不引入新问题，步步为营，各个击破；</p>

<hr />

<h3 id="section-1"><strong>二、背景知识</strong></h3>

<p><a href="">Mac系统下利用Octopress搭建Github个人Blog空间——<strong>背景知识</strong></a>，主要包含一下内容：</p>

<p>1.程序员怎么写博客？</p>

<p>2.为什么选择 Octopress 和 Github？</p>

<p>3.什么是Git？</p>

<p>4.什么是Ruby？</p>

<p>5.什么是RVM？</p>

<p>6.什么是终端／bash／Shell？</p>

<p>7.什么是HomeBrew？</p>

<p>8.Mac系统的文件系统设置及管理权限的一些特点？</p>

<hr />

<h3 id="section-2"><strong>三、搭建步骤</strong></h3>

<p><strong>声明</strong>：我的 Mac OS 版本号是10.9.5。请确保您的 Mac 在翻墙状态下。下列所有命令都在终端 Terminal 软件中输入。代码中“＃”号后面是注释，不用输入。</p>

<h4 id="git">1. 安装 Git</h4>

<p>到 <a href="http://git-scm.com/">Git</a> 官方网站，按照提示下载并安装最新版本的 Git 软件包。操作简单，无需赘言。</p>

<p>而且，10.9.5 的 Mac OS 版本已经预装了Git，所以不需要重新安装。检查当前 Git 版本号，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 输入
</span><span class="line">$ git --version
</span><span class="line"># 显示
</span><span class="line">git version 1.9.3 (Apple Git-50)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="ruby">2. 安装 Ruby</h4>

<p>安装 Ruby 有多种方法，这里推荐用 RVM 。</p>

<p>安装 RVM 也有多种办法，这里推荐用 HomeBrew 。</p>

<p>所以先从安装 HomeBrew 说起。</p>

<h5 id="homebrew">2.1 安装 HomeBrew</h5>

<p><a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 的安装代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>»重要提示－关于 HomeBrew</strong></p>

<p>由于 Mac 系统本身的一些设置问题，HomeBrew 在默认安装之后，用户在调用时经常会遇到一些权限报错信息。在不同的用户环境下，都需要重新进行一些设置更改。比如安装Ruby时会遇到下面的报错提示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ERROR: '/usr/local/bin' is not writable - it is required for Homebrew, try 'brew doctor' to fix it!
</span><span class="line">Requirements installation failed with status: 1.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们可以通过“brew doctor”命令来检查 HomeBrew 的问题，如下所示（为了节约页面空间，我省去了一些冗余信息）： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 输入
</span><span class="line">$ brew doctor
</span><span class="line"># 显示
</span><span class="line">Warning: /usr/local/etc isn't writable.
</span><span class="line">This can happen if you "sudo make install" software that isn't managed by Homebrew. If a formula tries to write a file to this directory, the install will fail during the link step.
</span><span class="line">You should probably `chown` /usr/local/etc
</span><span class="line">Warning: /usr/local/include isn't writable.
</span><span class="line">/....../
</span><span class="line">You should probably `chown` /usr/local/include
</span><span class="line">Warning: Your Homebrew is outdated.
</span><span class="line">You haven't updated for at least 24 hours. This is a long time in brewland!
</span><span class="line">To update Homebrew, run `brew update`.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们可以根据提示，通过以下代码解决这些问题（注意这是示例，要按照自己的情况对应解决）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo chown -R $USER /usr/local/etc
</span><span class="line">$ sudo chown -R $USER /usr/local/include
</span><span class="line">$ brew update</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更多的问题，可以到 <a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 官网寻求帮助。  </p>

<h5 id="rvm">2.2 安装 RVM。</h5>

<p>安装好 HomeBrew 后，用 HomeBrew 安装 RVM，命令如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -L https://get.rvm.io | bash -s stable</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行后可能会问要求输入管理员密码，输入密码后回车。然后电脑会自动通过homebrew安装依赖包，等待一段时间后就可以成功安装好 RVM。</p>

<p>然后输入下列代码，以载入 RVM 环境：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ source ~/.rvm/scripts/rvm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然也可以不输上面代码，关掉当前终端窗口并重新打开即可。</p>

<p>输入下面代码，检查是否正确安装 RVM ：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 输入
</span><span class="line">$ rvm -v
</span><span class="line"># 显示
</span><span class="line">rvm 1.26.3 (latest) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis   &lt;mpapis@gmail.com&gt; [https://rvm.io/]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="ruby-1">2.3 安装 Ruby。</h5>

<p><strong>»重要提示-关于 Mac 系统自带的 Ruby</strong></p>

<p>10.9.5 的 Mac OS 版本已经预装了Ruby 2.0版本。但是这个 Ruby 版本应该是是 Mac 处理全局数据默认预装的。它的好处我暂时不太清楚，但是缺点却很明显，就是当我们以普通用户调用 Ruby 里的包管理器 Gem 时，某些情况下，系统会提示没有足够的权限，而无法操作。如下面代码所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 输入
</span><span class="line">$ gem install bundler
</span><span class="line"># 显示错误信息
</span><span class="line">ERROR:  While executing gem ... (Gem::FilePermissionError)
</span><span class="line">You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，我们还是需要用 RVM 来安装一个当前用户可控的 Ruby 版本。我们选择安装最新稳定版 Ruby 2.1.5。</p>

<p>但是，当我们直接用 RVM 下载 Ruby 时，电脑又会提示错误信息如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 输入
</span><span class="line">$ rvm install 2.1.5
</span><span class="line"># 显示错误信息
</span><span class="line">Searching for binary rubies, this might take some time.
</span><span class="line">Found remote file https://rubies.travis-ci.org/osx/10.9/x86_64/ruby-2.1.5.tar.bz2
</span><span class="line">Checking requirements for osx.
</span><span class="line">ERROR: '/usr/local/bin' is not writable - it is required for Homebrew,
</span><span class="line">try 'brew doctor' to fix it!
</span><span class="line">Requirements installation failed with status: 1.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其原因是因为 RVM 安装 Ruby 时需要调用全局系统目录下的 Library 文件，而这是缺乏权限的。Google 了一下，找到了这个问题的解决办法，先输入下列命令代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rvm autolibs read-only</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后，就可以安装 Ruby 了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rvm install 2.1.5
</span><span class="line">$ rvm use 2.1.5
</span><span class="line">$ rvm rubygems latest</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>经过一段时间的等待，总算安装好了 Ruby 2.1.5 。检查代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 输入
</span><span class="line">$ ruby --version
</span><span class="line"># 显示信息
</span><span class="line">ruby 2.1.5p273 (2014-11-13 revision 48405) [x86_64-darwin13.0]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>恭喜你，Ruby 已装好了，这意味着你不仅可以装 Octopress ，还有机会学习一门新的编程语言。这是另外的课题了，感兴趣可以自己进一步了解学习。</p>

<h4 id="octopress">3. 安装Octopress。</h4>

<p>前面的问题如果顺利解决的话，这里就会轻松很多了。Octopress 的安装代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone git://github.com/imathis/octopress.git octopress # 复制 octopress 到本地
</span><span class="line">$ cd octopress ＃进入 octopress 文件夹</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面的代码把 Octopress 框架复制到本地，博客文件夹的位置和名称也可以自己定义，默认是上面的位置。</p>

<p>下一步，在该文件夹安装搭建博客所需的依赖项：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem install bundler
</span><span class="line">$ bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>等待一会，安装顺利完成后，接下来安装默认的主题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake install</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>紧接着输入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake preview</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这时，就可以在浏览器地址栏输入<code>http://localhost:4000</code>看到博客的预览样式。怎么样？喜不喜欢这个默认主题呢？不管怎样，总算是有点模样了。：）</p>

<h4 id="github-pages">4. 搭建 Github Pages。</h4>

<p>本地博客搭建好了，但是别人通过互联网是访问不到你的本地博客的。下一步就是要把搭建好的博客上传到网络上，可以让你的粉丝公开访问。</p>

<h5 id="github--new-repository">4.1 注册 Github 账号，创建 New Repository。</h5>

<p>首先注册一个自己的 Github 账户，登录后，创建自己的 New Repository（仓库，或理解成一个项目，用来存放你的博客代码及内容），然后务必设置该项目的名称为“<code>yourname.github.io</code>”，否则无法生成个人博客空间。</p>

<p>生成的时候，Github会建议你选择同时生成一个 README.md 文件，勾选上点击确定。然后，你会看到一个以“<code>yourname.github.io</code>”命名的代码仓库生成了。</p>

<p>接下来，还是回到终端环境Terminal下，这时直接输入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>系统会要求你输入一个SSH地址，我们回到刚才生成的Github仓库页面，在右侧看到一个形如 git@github.com:[your_username]/[your_username].github.io.git 的<code>SSH clone URL</code>，把这个复制，输入终端回车。</p>

<p>不出意外，小白的电脑因为从来没有设置过 SSH key，这时一定会报错如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">##
</span><span class="line">Permission denied (publickey).
</span><span class="line">fatal: Could not read from remote repository.
</span><span class="line">Please make sure you have the correct access rightsand the repository exists.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>下面我们设置一下 SSH Key 。</p>

<h5 id="ssh-key">4.2 设置 SSH Key。</h5>

<p>首先生成你的Git账号：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git config --global user.name  "你注册Github的用户名"
</span><span class="line">$ git config --global user.email "你注册Github的邮箱"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后，生成 SSH 密钥，输入以下命令，回车：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ssh-keygen -t rsa -C "你注册Github的邮箱"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>界面弹出下列信息，并按注释操作：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 显示如下代码，指出 SSH Key 的默认保存路径
</span><span class="line">$ Enter file in which to save the key (/Users/twer/.ssh/id_rsa):
</span><span class="line"># 直接回车,保存到默认位置
</span><span class="line"># 显示如下代码，提示设置密码
</span><span class="line">$ Enter passphrase (empty for no passphrase):
</span><span class="line"># 输入密码，回车
</span><span class="line"># 显示再次确认密码
</span><span class="line">$ Enter same passphrase again:
</span><span class="line"># 再次输入密码，回车</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>好了，现在屏幕上显示一堆外星文，表示 SSH Key已经生成。下一步就是，把 SSH Key 添加到Github账户上，这样Github的服务器就能远程认证我们的身份，接受数据传输。</p>

<p>打开文件<code>~/.ssh/id_rsa.pub</code>，复制里面的全部内容。然后回到Github界面，点击右上角小齿轮<code>Setting</code>图标，选择<code>SSH Keys</code> 一栏，单击<code>Add SSH Key</code>，把刚才复制的内容粘贴到<code>key输入框</code>内，然后直接保存。</p>

<p>至此，SSH key 就算是添加完毕。</p>

<h5 id="octopress--github">4.3 上传 Octopress 到 Github。</h5>

<p>现在，继续尝试步骤 4.1 里面的输入命令，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake setup_github_pages
</span><span class="line"># 输入你的 SSH clone URL</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>系统会要求你输入刚才设置的 SSH 密码，输入密码回车，你会看到刚才的错误提示消除了。接着执行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake generate
</span><span class="line">$ rake deploy</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>哈，可恶的错误代码又出来了，这个错误也让笔者抓狂了好久，贴出来：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">* [new branch] master-&gt; origin/master
</span><span class="line">There is no tracking information for the current branch.
</span><span class="line">Please specify which branch you want to merge with.
</span><span class="line">/....../
</span><span class="line">To git@github.com:BitVegeta/bitvegeta.github.io.git
</span><span class="line">! [rejected] master -&gt; master (non-fast-forward)
</span><span class="line">error: failed to push some refs to 'git@github.com:[your_username]/
</span><span class="line">[your_username].github.io.git'
</span><span class="line">hint: Updates were rejected because the tip of your current branch is behind
</span><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class="line">hint: 'git pull ...') before pushing again.
</span><span class="line">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>最终搞明白这是Git的使用不熟练导致的。解决办法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd octopress/_deploy
</span><span class="line">$ git pull origin master
</span><span class="line">$ cd ..
</span><span class="line">$ rake gen_deploy #‘rake generate’ 和 ‘rake deploy’ 合起来的简写</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>好了，现在终于看到让人欣喜的完成代码了，类似下面的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">## Pushing generated _deploy website
</span><span class="line">Counting objects: 31, done.
</span><span class="line">Delta compression using up to 4 threads.
</span><span class="line">Compressing objects: 100% (12/12), done.
</span><span class="line">Writing objects: 100% (16/16), 28.67 KiB | 0 bytes/s, done.
</span><span class="line">Total 16 (delta 7), reused 0 (delta 0)
</span><span class="line">## Github Pages deploy complete</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这意味着十几分钟之后，在你的浏览器地址栏输入<code>http://yourname.github.io</code>，就可以看到一个专属于你个人控制的博客界面了，虽然还很初级，但是感觉很亲切有木有！？毕竟一番辛苦没有白费。:D</p>

<p>好了，接下来的任务就是添加博客内容以及优化博客配置了。</p>

<h5 id="section-3">4.4 上传文章</h5>

<p>在上传文章之前，现在 Github 当前的仓库中建立一个新的分支 Branch ，用来存放文章，图片等内容，名称按规定叫做 Source。实现代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git add .
</span><span class="line">$ git commit -m "备注内容"
</span><span class="line">$ git push origin source</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>顺利的话，你会发现 Github 当前的仓库里多了一个 branch 选项；</p>

<p>好的，现在就可以开始添加一篇新文章了，操作代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd octopress
</span><span class="line">$ rake new_post["Post Title"]</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中“Post Title”是你为文章所起的名字。执行后，打开文件夹<code>~/octopress/source/posts</code>，会找到一个<code>yyyy-mm-dd-Post-Title.markdown</code>的文件，<code>yyyy-mm-dd</code>是文件创建的时间，系统会自动按时间命名并排序文章。</p>

<p>好，用文本编辑器打开这个生成的文件之后，就可以写内容了。我用的编辑器是 <a href="http://25.io">MOU</a>，一款优秀且免费的 Markdown 编辑器。</p>

<p>写好之后，再执行命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake gen_deploy</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>就可以更新自己的博客空间。这时刷新一下，你的博客页面，你会发现第一篇文章已经娇羞的展现出来！：）
好的，最基本的工作总算完成了，相信你这时开始会有更高的要求，想把自己的博客打扮的更漂亮一点，或者个性化一点，那么，接下来的工作，就是改进 Octopress 的基本配置以及更改博客主题。</p>

<p>鉴于篇幅原因，这一部分内容放到下一篇文章里写。：）</p>

<p>如果你是能耐住性子的话，可以再等等，把博客打扮漂亮一点再拿去朋友圈炫一下，刺激一下女友什么的。</p>

<hr />

<h3 id="section-4">四、参考资料</h3>

<ol>
  <li>
    <p><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客</a></p>
  </li>
  <li>
    <p><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">Octopress 搭建流程 – Github Pages</a></p>
  </li>
  <li>
    <p><a href="http://www.sgxiang.com/blog/2013/10/18/cong-ling-kai-shi-da-jian-ji-yu-githubde-octopressbo-ke/">在Mac上从零开始搭建基于Github的Octopress博客</a></p>
  </li>
  <li>
    <p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a></p>
  </li>
  <li>
    <p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>

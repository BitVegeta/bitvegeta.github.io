<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：mac | 精神和时间的小屋]]></title>
  <link href="http://bitvegeta.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://bitvegeta.github.io/"/>
  <updated>2015-04-16T09:14:26+08:00</updated>
  <id>http://bitvegeta.github.io/</id>
  <author>
    <name><![CDATA[Bitegeta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finder显示｜隐藏系统文件的方法]]></title>
    <link href="http://bitvegeta.github.io/blog/quickly-show-hide-hidden-files-on-mac/"/>
    <updated>2014-12-06T23:09:11+08:00</updated>
    <id>http://bitvegeta.github.io/blog/quickly-show-hide-hidden-files-on-mac</id>
    <content type="html"><![CDATA[<p>Mac OS 系统下，一些文件是以隐藏文件存在的，这些文件通常都会有一个‘.’作为前缀，即文件名为“.example”形式。这样的好处是，一些重要的系统文件不会被一些误操作删除或损坏，而且 Finder 界面也会显示的更为简介；但缺点就是查找更改一些东西的时候不方便。</p>

<p>通过Google学习了些显示／隐藏系统文件的方法，做下面的笔记，供大家参考。<!--more--></p>

<h4 id="section">1.在终端输入命令行控制</h4>

<p>{% codeblock lang:ruby “显示／隐藏系统文件命令” %}
# 显示所有隐藏文件：
$ defaults write com.apple.finder AppleShowAllFiles -bool true</p>

<h1 id="section-1">隐藏所有隐藏文件：</h1>
<p>$ defaults write com.apple.finder AppleShowAllFiles -bool false
{% endcodeblock %}</p>

<p>这种方法简单有效，但是容易忘记代码，需要做好笔记，推荐一种更直接的办法：</p>

<h4 id="alias-">2.设置 alias 快捷控制</h4>

<p>按照自己的终端修改<code>~/.zshrc</code>或<code>~/.bash_profile</code>文件，添加下面的两行代码，设置如下：</p>

<p>{% codeblock lang:ruby “设置 alias 快捷控制” %}
# 显示命令的alias
alias showFiles=’defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app’ </p>

<h1 id="alias">隐藏命令的alias</h1>
<p>alias hideFiles=’defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app’
{% endcodeblock %}</p>

<p>现在就可以用“showFiles”／“hideFiles”来控制显示／隐藏系统文件了。</p>

<p>当然，这个方式跟 Ubuntu 系统下 “Contrl＋h”控制显示／隐藏文件相比，还是略显麻烦。当然，Mac 下也可以自己写一个脚本控制。</p>

<h4 id="section-2">3.编写控制脚本，并设置一个快捷键调用</h4>

<p>在［应用程序］里，找到并打开［Automator］软件，选择建立［服务］文件，在左侧［资源库］栏找到［实用工具］栏目，选择其中的［运行 shell 脚本］，拖动到右侧编辑区域，输入以下脚本代码：</p>

<p>{% codeblock lang:ruby “Show／Hide Files 控制脚本” %}
  STATUS=<code>defaults read com.apple.finder AppleShowAllFiles</code> 
  if [ $STATUS == YES ]; 
  then 
      defaults write com.apple.finder AppleShowAllFiles NO 
  else 
      defaults write com.apple.finder AppleShowAllFiles YES 
  fi 
  killall Finder
  /System/Library/CoreServices/Finder.app
{% endcodeblock %}</p>

<p>在［服务“收到”］的下拉菜单中选择“没有输入”，［位于］选择“Finder”，然后“Command＋s”储存脚本，将其命名为“Show／Hide Files”。然后打开[Finder]的“服务”菜单，就可以看到刚才制作的“Show／Hide Files”选项。打开 Mac 的“系统偏好设置”，找到“键盘”里面的快捷键选项卡，设置其快捷方式为“Command+h”。</p>

<p>到此，就可以用快捷键方便的切换了。：）</p>

<p>另外，这个脚本文件默认的保存路径是<code>“~/Libiary/Services”</code>，如果想更改，可以手动删除。</p>

<h4 id="section-3">参考资料</h4>

<p>[1]<a href="http://ianlunn.co.uk/articles/quickly-showhide-hidden-files-mac-os-x-mavericks/">Quickly Show/Hide Hidden Files on Mac OS X Mavericks &amp; Yosemite</a></p>

<p>[2]<a href="http://blog.sina.com.cn/s/blog_59fb90df01019vod.html">mac  快速显示、隐藏 文件方法，包括快捷键</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端用命令行调用 Sublime Text 2]]></title>
    <link href="http://bitvegeta.github.io/blog/sublime-text-shell-command/"/>
    <updated>2014-12-05T21:40:43+08:00</updated>
    <id>http://bitvegeta.github.io/blog/sublime-text-shell-command</id>
    <content type="html"><![CDATA[<p><a href="http://www.sublimetext.com/">Sublime Text</a> 作为一款优秀的文本编辑器，近年来其发展的势头一度盖过传统的 TextMate ，其拥有强大的包管理功能和优美易用的界面，被称为“最性感的编辑器”。</p>

<p><a href="http://www.sublimetext.com/">Sublime Text 2</a> 是一款免费的应用，推荐刚接触 Mac 和编程的同学使用。</p>

<p>在终端用命令行调用 Sublime Text 2 的快捷方法设置如下：<!--more--></p>

<h4 id="sublime-text-2-">为 Sublime Text 2 设置一个符号链接</h4>

<p>{% codeblock lang:ruby “为 Sublime Text 2 设置一个符号链接” %}
$ sudo ln -s “/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl” /usr/bin/subl
{% endcodeblock %}</p>

<p><strong>重要提示：Mac下这个操作要求必须是Root权限账户。</strong></p>

<p>执行命令，如果运行成功，则可以直接用“subl”作为命令编辑一个文件；
如果提示错误，则需要查看 $PATH 的值，以确保<code>/usr/bin/</code>路径在<code>/bin/</code>路径之前。查看命令如下：</p>

<p><code>
$ echo $PATH
</code>
若需更改 $PATH 变量，打开 /etc/paths 路径编辑即可；</p>

<h4 id="alias">自定义alias</h4>

<p>在<code>~/.zshrc</code>中定义 <code>‘sb’</code>为 sublime Text 2 的别名，添加下列代码：</p>

<p><code>
 alias sb='subl'
</code></p>

<p>现在终端中输入‘sb example.html’，即可创建一个 html 文件。</p>

<p>如果你用的使 bash 终端，在<code>~/.bash_profile</code>文件中更改。</p>

<h4 id="section">参考资料</h4>

<p>[1]<a href="http://www.yangzhiping.com/tech/mac-dev.html">Mac开发者2013年新机设置参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zsh: No Matches Found 问题解决方法]]></title>
    <link href="http://bitvegeta.github.io/blog/zsh-no-matches-found/"/>
    <updated>2014-12-04T22:34:56+08:00</updated>
    <id>http://bitvegeta.github.io/blog/zsh-no-matches-found</id>
    <content type="html"><![CDATA[<p>我的终端环境是 iTerm2 + Zsh 组合，今天发现，在Zsh环境下提交rake命令后报错：</p>

<p>{% codeblock lang:ruby “zsh: no matches found 错误” %}
# 输入
$ rake new_post[“example–title”]
# 显示错误
zsh: no matches found: new_post[“example–title”]
{% endcodeblock %}</p>

<p>求助万能的Google，找到了问题原因和解决办法：<!--more--></p>

<p><strong>原因：</strong></p>

<table>
  <tbody>
    <tr>
      <td>Zsh会自动把类似‘*，(，</td>
      <td>，&lt;，[，?’等符号识别为一种通配符；</td>
    </tr>
  </tbody>
</table>

<p><strong>解决办法一：</strong></p>

<p>按照下面方式输入：</p>

<p>此时输入  example–title 即可。</p>

<p><strong>解决办法二：</strong></p>

<p>取消zsh的通配(GLOB),修改 ~/.zshrc 文件，添加下列内容：</p>

<p><code>
alias rake="noglob rake"
</code>
这个方法较为彻底。</p>

<p><strong>解决办法三：</strong></p>

<p>使用转义字符’&#8217;，帮助 Zsh 读懂命令；</p>

<p><code>
$ rake new_post\["This is New Post"\] 
</code>
***</p>

<p>P.S.其余的 Zsh: no matches found 问题都可以用类似方法解决。</p>

<p><strong>参考资料</strong></p>

<p>[1]<a href="https://github.com/imathis/octopress/issues/117">Not compatible with Zsh #117</a></p>
]]></content>
  </entry>
  
</feed>

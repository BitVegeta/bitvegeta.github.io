<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：octopress | 精神和时间的小屋]]></title>
  <link href="http://bitvegeta.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://bitvegeta.github.io/"/>
  <updated>2015-04-15T13:39:45+08:00</updated>
  <id>http://bitvegeta.github.io/</id>
  <author>
    <name><![CDATA[Bitegeta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Liquid Exception: Undefined Method Sort 错误解决方法]]></title>
    <link href="http://bitvegeta.github.io/blog/liquid-exception-undefined-method-sort/"/>
    <updated>2014-12-04T19:46:27+08:00</updated>
    <id>http://bitvegeta.github.io/blog/liquid-exception-undefined-method-sort</id>
    <content type="html"><![CDATA[<p>折腾了一下午自己的 Octopress 博客配置，但是在提交更新时出现了一些问题，代码如下：</p>

<p><code>
# 输入命令
$ rake gen_deploy
# 显示错误信息
   Liquid Exception: undefined method `sort!' for nil:NilClass in _includes/post/categories.html, included in _layouts/post.html
   jekyll 2.5.2 | Error:  undefined method `sort!' for nil:NilClass
</code>
在万能的 Google 上找到了解决办法，感谢！这位同学的博客<a href="http://blog.gordontillman.info/blog/2014-11-26-liquid-exception:-undefined-method-sort.html">[1]</a>也是 Octopress ，哈哈！:D <!--more--></p>

<p><strong>解决办法是：</strong></p>

<p>用 Sublime 打开 <code>~/Octopress/plugins/category_generator.rb</code> 文件，找到下面的这段代码：</p>

<p><code>
 def category_links(categories)
      categories = categories.sort!.map { |c| category_link c }
        case categories.length
        when 0
          ""
        when 1
          categories[0].to_s
        else
          "#{categories[0...-1].join(', ')}, #{categories[-1]}"
        end
      end
</code></p>

<p>然后，添加两行代码（<code>添加的代码行，后面都添加了注释</code>）：</p>

<p><code>
 def category_links(categories)
   if categories != nil     # Added this line 添加这一行
      categories = categories.sort!.map { |c| category_link c }
        case categories.length
        when 0
          ""
        when 1
          categories[0].to_s
        else
          "#{categories[0...-1].join(', ')}, #{categories[-1]}"
        end
      end                      # Added this line 添加这一行
   end
</code>
保存后，运行 <code>rake gen_deploy</code>显示成功。</p>

<hr />
<p><strong>参考资料</strong></p>

<p>[1] <a href="http://blog.gordontillman.info/blog/2014-11-26-liquid-exception:-undefined-method-sort.html">Liquid Exception: Undefined Method Sort</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac版Octopress搭建Github博客[小白教程]]]></title>
    <link href="http://bitvegeta.github.io/blog/mac-octopress-github-blog-newbie-xiao-bai-jiao-cheng/"/>
    <updated>2014-11-30T11:41:47+08:00</updated>
    <id>http://bitvegeta.github.io/blog/mac-octopress-github-blog-newbie-xiao-bai-jiao-cheng</id>
    <content type="html"><![CDATA[<p>在 Mac 系统下，利用 Octopress 框架在 Github 上搭建一个免费的个人Blog空间。——— 相信这是很多刚接触  Mac  和 Github 的朋友们想要完成的一个成长实践。</p>

<p>我把自己的搭建步骤及遇到的问题全部详细的写下来，作为这个博客空间的第一篇文章，算是完成对 Octopress 和 Github 的致敬传统。同时也希望能给遇到同样问题的小白朋友们提供一些帮助！因为我相信，广大小白朋友缺乏的不是一篇精美的标准流程，而是一个整合了多种错误问题，错误代码及其解决办法的示例教程。我觉得我犯的错误属于比较经典的反面教材，正好起到抛砖引玉的作用！：）<!--more--></p>

<p>由于学识粗浅，若有不对之处，还望高手指正！多谢！</p>

<ul id="markdown-toc">
  <li><a href="#section"><strong>一、前言</strong></a></li>
  <li><a href="#section-1"><strong>二、背景知识</strong></a></li>
  <li><a href="#section-2"><strong>三、搭建步骤</strong></a>    <ul>
      <li><a href="#git">1. 安装 Git</a></li>
      <li><a href="#ruby">2. 安装 Ruby</a>        <ul>
          <li><a href="#homebrew">2.1 安装 HomeBrew</a></li>
          <li><a href="#rvm">2.2 安装 RVM。</a></li>
          <li><a href="#ruby-1">2.3 安装 Ruby。</a></li>
        </ul>
      </li>
      <li><a href="#octopress">3. 安装Octopress。</a></li>
      <li><a href="#github-pages">4. 搭建 Github Pages。</a>        <ul>
          <li><a href="#github--new-repository">4.1 注册 Github 账号，创建 New Repository。</a></li>
          <li><a href="#ssh-key">4.2 设置 SSH Key。</a></li>
          <li><a href="#octopress--github">4.3 上传 Octopress 到 Github。</a></li>
          <li><a href="#section-3">4.4 上传文章</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#section-4">四、参考资料</a></li>
</ul>

<h3 id="section"><strong>一、前言</strong></h3>

<p>网上关于 Octopress 搭建 Github Pages 博客的操作教程有很多，有很多博客写的结构清晰，文字易读，页面优美，令人敬佩！</p>

<p>但作为一个“一直被女友鄙视智商”的小白，我自己在动手搭建过程中，还是遇到了一些问题，耗费了不少时间，折腾多次几近放弃。虽然最终借助万能的 Google 解决了安装问题，但也忍不住为广大小白的命运慨叹一番：万事开头难啊！对小白来说，这些不明觉厉的红色 Error 代码会放大成一串串难以琢磨的纠结疑问，如果没有足够的耐心和有效的解决方案，难免会急躁、苦恼，甚至失去进一步学习的激情！于是，牛人愈牛，而小白恒白，这也是“马太效应”在知识学习方面的客观体现吧！［泪］</p>

<p><strong>困难存在的客观原因：</strong></p>

<p>1.对牛弹琴：</p>

<p>其实玩转 Octopress + Github 搭建的 Blog 系统，读者必须掌握或了解Linux环境下的软件操作习惯，Github，SSH的一些基本知识，以及最重要的，Git的初级应用。而小白基础太差，大部分都没有命令行操作经验，甚至连终端是什么都不知道，更不用说 Git，Github，RVM，Ruby，HomeBrew 等。所以，即使看着精细标准化的操作教程，小白也难免会觉得“自己这水平充其量也就只能在吃草界混了”，大脑自动切换到呆萌模式。</p>

<p>2.不明觉厉：</p>

<p>搭建博客的操作基本都是标准化的，但安装过程中产生的问题却各式各样。比如：Mac系统自带的Ruby版本可能会导致一些问题，Bash本身的设置也可能会导致一些问题，Git的merge操作会导致问题，解决问题A结果导致问题B，甚至自己不小心输错而不自知等等都会导致问题。而当这些问题反馈成一段段不明觉厉的 Error 代码显示在早已被终端屏幕搞的眼花缭乱的小白面前时，内心那种感觉简直就是有一万匹草泥马奔腾而过！</p>

<p><strong>解决方案：</strong></p>

<p>1.基础铺垫：先学习了解一些基本知识，形成一个正确的感性认识，理解每一步操作的意义；</p>

<p>2.稍安勿躁：出现错误提示不要着急，有控制的尝试解决，在未解决旧问题前不引入新问题，步步为营，各个击破；</p>

<h3 id="section-1"><strong>二、背景知识</strong></h3>

<p>总结了一下我在搭建 Github Pages 博客时遇到的一些问题。原计划做个简单的解答（其实只是Google 搜索的搬运工），但又觉得这样不仅造成文章冗余，而且没什么意义：<strong>爱学习的人是不需要别人替自己Google的！</strong>所以，只是简单列出来，供小白同学思考，并带着这些问题进行下面的操作步骤！：）</p>

<p>0.什么是翻墙？</p>

<p>1.为什么程序员喜欢用 Github Pages 写博客？</p>

<p>2.为什么选择 Octopress？</p>

<p>3.什么是 Git？</p>

<p>4.什么是 Ruby？</p>

<p>5.什么是 RVM？</p>

<p>6.什么是终端／bash／Shell？</p>

<p>7.什么是 HomeBrew？</p>

<p>8.什么是 SSH？</p>

<p>9.Mac 系统的文件系统设置及管理权限的一些特点？</p>

<h3 id="section-2"><strong>三、搭建步骤</strong></h3>

<p><strong>声明</strong>：我的 Mac OS 版本号是10.9.5。请确保您的 Mac 在翻墙状态下。下列所有命令都在终端 Terminal 软件中输入。代码中“＃”号后面是注释，不用输入。</p>

<h4 id="git">1. 安装 Git</h4>

<p>到 <a href="http://git-scm.com/">Git</a> 官方网站，按照提示下载并安装最新版本的 Git 软件包。操作简单，无需赘言。</p>

<p>而且，10.9.5 的 Mac OS 版本已经预装了Git，所以不需要重新安装。检查当前 Git 版本号，代码如下：</p>

<p><code>
# 输入
$ git --version
# 显示
git version 1.9.3 (Apple Git-50)
</code></p>

<h4 id="ruby">2. 安装 Ruby</h4>

<p>安装 Ruby 有多种方法，这里推荐用 RVM 。</p>

<p>安装 RVM 也有多种办法，这里推荐用 HomeBrew 。</p>

<p>所以先从安装 HomeBrew 说起。</p>

<h5 id="homebrew">2.1 安装 HomeBrew</h5>

<p><a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 的安装代码如下：</p>

<p><code>
$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></p>

<p><strong>»重要提示－关于 HomeBrew</strong></p>

<p>由于 Mac 系统本身的一些设置问题，HomeBrew 在默认安装之后，用户在调用时经常会遇到一些权限报错信息。在不同的用户环境下，都需要重新进行一些设置更改。比如安装Ruby时会遇到下面的报错提示：</p>

<p><code>
ERROR: '/usr/local/bin' is not writable - it is required for Homebrew, try 'brew doctor' to fix it!
Requirements installation failed with status: 1.
</code></p>

<p>我们可以通过“brew doctor”命令来检查 HomeBrew 的问题，如下所示（为了节约页面空间，我省去了一些冗余信息）： </p>

<p><code>
# 输入
$ brew doctor
# 显示
Warning: /usr/local/etc isn't writable.
This can happen if you "sudo make install" software that isn't managed by Homebrew. If a formula tries to write a file to this directory, the install will fail during the link step.
You should probably `chown` /usr/local/etc
Warning: /usr/local/include isn't writable.
/....../
You should probably `chown` /usr/local/include
Warning: Your Homebrew is outdated.
You haven't updated for at least 24 hours. This is a long time in brewland!
To update Homebrew, run `brew update`.
</code></p>

<p>我们可以根据提示，通过以下代码解决这些问题（注意这是示例，要按照自己的情况对应解决）：</p>

<p><code>
$ sudo chown -R $USER /usr/local/etc
$ sudo chown -R $USER /usr/local/include
$ brew update
</code></p>

<p>更多的问题，可以到 <a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 官网寻求帮助。  </p>

<h5 id="rvm">2.2 安装 RVM。</h5>

<p>安装好 HomeBrew 后，用 HomeBrew 安装 RVM，命令如下：</p>

<p><code>
$ curl -L https://get.rvm.io | bash -s stable
</code></p>

<p>执行后可能会问要求输入管理员密码，输入密码后回车。然后电脑会自动通过homebrew安装依赖包，等待一段时间后就可以成功安装好 RVM。</p>

<p>然后输入下列代码，以载入 RVM 环境：</p>

<p><code>
$ source ~/.rvm/scripts/rvm
</code></p>

<p>当然也可以不输上面代码，关掉当前终端窗口并重新打开即可。</p>

<p>输入下面代码，检查是否正确安装 RVM ：</p>

<p><code>
# 输入
$ rvm -v
# 显示
rvm 1.26.3 (latest) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis   &lt;mpapis@gmail.com&gt; [https://rvm.io/]
</code></p>

<h5 id="ruby-1">2.3 安装 Ruby。</h5>

<p><strong>»重要提示-关于 Mac 系统自带的 Ruby</strong></p>

<p>10.9.5 的 Mac OS 版本已经预装了Ruby 2.0版本。但是这个 Ruby 版本应该是是 Mac 处理全局数据默认预装的。它的好处我暂时不太清楚，但是缺点却很明显，就是当我们以普通用户调用 Ruby 里的包管理器 Gem 时，某些情况下，系统会提示没有足够的权限，而无法操作。如下面代码所示：</p>

<p><code>
# 输入
$ gem install bundler
# 显示错误信息
ERROR:  While executing gem ... (Gem::FilePermissionError)
You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
</code></p>

<p>所以，我们还是需要用 RVM 来安装一个当前用户可控的 Ruby 版本。我们选择安装最新稳定版 Ruby 2.1.5。</p>

<p>但是，当我们直接用 RVM 下载 Ruby 时，电脑又会提示错误信息如下：</p>

<p><code>
# 输入
$ rvm install 2.1.5
# 显示错误信息
Searching for binary rubies, this might take some time.
Found remote file https://rubies.travis-ci.org/osx/10.9/x86_64/ruby-2.1.5.tar.bz2
Checking requirements for osx.
ERROR: '/usr/local/bin' is not writable - it is required for Homebrew,
try 'brew doctor' to fix it!
Requirements installation failed with status: 1.
</code>
其原因是因为 RVM 安装 Ruby 时需要调用全局系统目录下的 Library 文件，而这是缺乏权限的。Google 了一下，找到了这个问题的解决办法，先输入下列命令代码：</p>

<p><code>
$ rvm autolibs read-only
</code>
然后，就可以安装 Ruby 了：</p>

<p><code>
$ rvm install 2.1.5
$ rvm use 2.1.5
$ rvm rubygems latest
</code>
经过一段时间的等待，总算安装好了 Ruby 2.1.5 。检查代码如下：</p>

<p><code>
# 输入
$ ruby --version
# 显示信息
ruby 2.1.5p273 (2014-11-13 revision 48405) [x86_64-darwin13.0]
</code>
恭喜你，Ruby 已装好了，这意味着你不仅可以装 Octopress ，还有机会学习一门新的编程语言。这是另外的课题了，感兴趣可以自己进一步了解学习。</p>

<h4 id="octopress">3. 安装Octopress。</h4>

<p>前面的问题如果顺利解决的话，这里就会轻松很多了。Octopress 的安装代码如下：</p>

<p><code>
$ git clone git://github.com/imathis/octopress.git octopress # 复制 octopress 到本地
$ cd octopress ＃进入 octopress 文件夹
</code>
上面的代码把 Octopress 框架复制到本地，博客文件夹的位置和名称也可以自己定义，默认是上面的位置。</p>

<p>下一步，在该文件夹安装搭建博客所需的依赖项：</p>

<p><code>
$ gem install bundler
$ bundle install
</code>
等待一会，安装顺利完成后，接下来安装默认的主题：</p>

<p><code>
$ rake install
</code>
紧接着输入：</p>

<p><code>
$ rake preview
</code>
这时，就可以在浏览器地址栏输入<code>http://localhost:4000</code>看到博客的预览样式。怎么样？喜不喜欢这个默认主题呢？不管怎样，总算是有点模样了。：）</p>

<h4 id="github-pages">4. 搭建 Github Pages。</h4>

<p>本地博客搭建好了，但是别人通过互联网是访问不到你的本地博客的。下一步就是要把搭建好的博客上传到网络上，可以让你的粉丝公开访问。</p>

<h5 id="github--new-repository">4.1 注册 Github 账号，创建 New Repository。</h5>

<p>首先注册一个自己的 Github 账户，登录后，创建自己的 New Repository（仓库，或理解成一个项目，用来存放你的博客代码及内容），然后务必设置该项目的名称为“<code>yourname.github.io</code>”，否则无法生成个人博客空间。</p>

<p>生成的时候，Github会建议你选择同时生成一个 README.md 文件，勾选上点击确定。然后，你会看到一个以“<code>yourname.github.io</code>”命名的代码仓库生成了。</p>

<p>接下来，还是回到终端环境Terminal下，这时直接输入：</p>

<p><code>
$ rake setup_github_pages
</code></p>

<p>系统会要求你输入一个SSH地址，我们回到刚才生成的Github仓库页面，在右侧看到一个形如 git@github.com:[your_username]/[your_username].github.io.git 的<code>SSH clone URL</code>，把这个复制，输入终端回车。</p>

<p>不出意外，小白的电脑因为从来没有设置过 SSH key，这时一定会报错如下代码：</p>

<p><code>
##
Permission denied (publickey).
fatal: Could not read from remote repository.
Please make sure you have the correct access rightsand the repository exists.
</code>
下面我们设置一下 SSH Key 。</p>

<h5 id="ssh-key">4.2 设置 SSH Key。</h5>

<p>首先生成你的Git账号：</p>

<p><code>
$ git config --global user.name  "你注册Github的用户名"
$ git config --global user.email "你注册Github的邮箱"
</code>
然后，生成 SSH 密钥，输入以下命令，回车：</p>

<p><code>
$ ssh-keygen -t rsa -C "你注册Github的邮箱"
</code>
界面弹出下列信息，并按注释操作：</p>

<p><code>
# 显示如下代码，指出 SSH Key 的默认保存路径
$ Enter file in which to save the key (/Users/twer/.ssh/id_rsa):
# 直接回车,保存到默认位置
# 显示如下代码，提示设置密码
$ Enter passphrase (empty for no passphrase):
# 输入密码，回车
# 显示再次确认密码
$ Enter same passphrase again:
# 再次输入密码，回车
</code>
好了，现在屏幕上显示一堆外星文，表示 SSH Key已经生成。下一步就是，把 SSH Key 添加到Github账户上，这样Github的服务器就能远程认证我们的身份，接受数据传输。</p>

<p>打开文件<code>~/.ssh/id_rsa.pub</code>，复制里面的全部内容。然后回到Github界面，点击右上角小齿轮<code>Setting</code>图标，选择<code>SSH Keys</code> 一栏，单击<code>Add SSH Key</code>，把刚才复制的内容粘贴到<code>key输入框</code>内，然后直接保存。</p>

<p>至此，SSH key 就算是添加完毕。</p>

<h5 id="octopress--github">4.3 上传 Octopress 到 Github。</h5>

<p>现在，继续尝试步骤 4.1 里面的输入命令，</p>

<p><code>
$ rake setup_github_pages
# 输入你的 SSH clone URL
</code>
系统会要求你输入刚才设置的 SSH 密码，输入密码回车，你会看到刚才的错误提示消除了。接着执行：</p>

<p><code>
$ rake generate
$ rake deploy
</code>
哈，可恶的错误代码又出来了，这个错误也让笔者抓狂了好久，贴出来：</p>

<p><code>
* [new branch] master-&gt; origin/master
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
/....../
To git@github.com:BitVegeta/bitvegeta.github.io.git
! [rejected] master -&gt; master (non-fast-forward)
error: failed to push some refs to 'git@github.com:[your_username]/
[your_username].github.io.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code>
最终搞明白这是Git的使用不熟练导致的。解决办法：</p>

<p><code>
$ cd octopress/_deploy
$ git pull origin master
$ cd ..
$ rake gen_deploy #‘rake generate’ 和 ‘rake deploy’ 合起来的简写
</code>
好了，现在终于看到让人欣喜的完成代码了，类似下面的：</p>

<p><code>
## Pushing generated _deploy website
Counting objects: 31, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (16/16), 28.67 KiB | 0 bytes/s, done.
Total 16 (delta 7), reused 0 (delta 0)
## Github Pages deploy complete
</code>
这意味着十几分钟之后，在你的浏览器地址栏输入<code>http://yourname.github.io</code>，就可以看到一个专属于你个人控制的博客界面了，虽然还很初级，但是感觉很亲切有木有！？毕竟一番辛苦没有白费。:D</p>

<p>好了，接下来的任务就是添加博客内容以及优化博客配置了。</p>

<h5 id="section-3">4.4 上传文章</h5>

<p>在上传文章之前，现在 Github 当前的仓库中建立一个新的分支 Branch ，用来存放文章，图片等内容，名称按规定叫做 Source。实现代码如下：</p>

<p><code>
$ git add .
$ git commit -m "备注内容"
$ git push origin source
</code>
顺利的话，你会发现 Github 当前的仓库里多了一个 branch 选项；</p>

<p>好的，现在就可以开始添加一篇新文章了，操作代码如下：</p>

<p><code>
$ cd octopress
$ rake new_post["Post Title"]
</code>
其中“Post Title”是你为文章所起的名字。执行后，打开文件夹<code>~/octopress/source/posts</code>，会找到一个<code>yyyy-mm-dd-Post-Title.markdown</code>的文件，<code>yyyy-mm-dd</code>是文件创建的时间，系统会自动按时间命名并排序文章。</p>

<p>好，用文本编辑器打开这个生成的文件之后，就可以写内容了。我用的编辑器是 <a href="http://25.io">MOU</a>，一款优秀且免费的 Markdown 编辑器。</p>

<p>写好之后，再执行命令</p>

<p><code>
$ rake gen_deploy
</code>
就可以更新自己的博客空间。这时刷新一下，你的博客页面，你会发现第一篇文章已经娇羞的展现出来！：）
好的，最基本的工作总算完成了，相信你这时开始会有更高的要求，想把自己的博客打扮的更漂亮一点，或者个性化一点，那么，接下来的工作，就是改进 Octopress 的基本配置以及更改博客主题。</p>

<p>鉴于篇幅原因，这一部分内容放到下一篇文章里写。：）</p>

<p>如果你是能耐住性子的话，可以再等等，把博客打扮漂亮一点再拿去朋友圈炫一下，刺激一下女友什么的。</p>

<h3 id="section-4">四、参考资料</h3>

<ol>
  <li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客</a></li>
  <li><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">Octopress 搭建流程 – Github Pages</a></li>
  <li><a href="http://www.sgxiang.com/blog/2013/10/18/cong-ling-kai-shi-da-jian-ji-yu-githubde-octopressbo-ke/">在Mac上从零开始搭建基于Github的Octopress博客</a></li>
  <li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a></li>
  <li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></li>
</ol>
]]></content>
  </entry>
  
</feed>
